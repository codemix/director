// Generated by CoffeeScript 1.6.1
/*
# Director.coffee
*/

/*
Creates / Returns the director instance for the
given scope
*/

var Directive, Director, director,
  _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = director = function(scope, config) {
  var instance, _i, _len, _ref;
  if (scope == null) {
    scope = $("body");
  }
  _ref = director.instances;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    instance = _ref[_i];
    if (instance.scope === scope) {
      if (config != null) {
        instance.configure(config);
      }
      return instance;
    }
  }
  if (config == null) {
    config = {};
  }
  config.scope || (config.scope = scope);
  instance = new Director(config);
  director.instances.push(instance);
  return instance;
};

/*
Holds the director instances
*/


director.instances = [];

director.Director = Director = (function() {
  /*
  Configure and initialize the directive
  */

  function Director(config) {
    /*
    The scope within which to look for directives
    */
    this.scope = $("body");
    /*
    The prefix to use to signify directive related attributes
    */

    this.prefix = "x-";
    /*
    The directive instances associated with this director
    */

    this.directives = [];
    if (config != null) {
      this.configure(config);
    }
    if (this.directives.length === 0) {
      this.addDirective(Directive.Confirm);
      this.addDirective(Directive.Alert);
      this.addDirective(Directive.Trigger);
    }
  }

  /*
  Configure the directive based on a config object
  */


  Director.prototype.configure = function(config) {
    var attribute, value;
    for (attribute in config) {
      value = config[attribute];
      this[attribute] = value;
    }
    return this;
  };

  /*
  Adds the given directive
  */


  Director.prototype.addDirective = function(directive) {
    if (typeof directive === "function") {
      directive = new directive(this);
    } else {
      directive.director = this;
    }
    this.directives.push(directive);
    return this;
  };

  /*
  Starts the director
  */


  Director.prototype.start = function() {
    var directive, _i, _len, _ref;
    _ref = this.directives;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      directive = _ref[_i];
      directive.start();
    }
    return this;
  };

  /*
  Stops the director
  */


  Director.prototype.stop = function() {
    var directive, _i, _len, _ref;
    _ref = this.directives;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      directive = _ref[_i];
      directive.stop();
    }
    return this;
  };

  return Director;

})();

director.Directive = Directive = (function() {
  /*
  Configure and initialize the directive
  */

  function Directive(director, config) {
    var _this = this;
    this.director = director;
    this.attributes = function(element) {
      return Directive.prototype.attributes.apply(_this, arguments);
    };
    this.initialize();
    if (config != null) {
      this.configure(config);
    }
  }

  /*
  Initialize the directive
  */


  Directive.prototype.initialize = function() {
    /*
    Holds the root scope for the directive
    */

    var _ref;
    this.scope = (_ref = this.director) != null ? _ref.scope : void 0;
    /*
    Holds the events that have been bound
    */

    this.bound = [];
    /*
    Holds the supported selector events
    */

    this.selectorEvents = [];
    return this;
  };

  /*
  Configure the directive based on a config object
  */


  Directive.prototype.configure = function(config) {
    var attribute, value;
    for (attribute in config) {
      value = config[attribute];
      this[attribute] = value;
    }
    return this;
  };

  /*
  Determine whether or not a given element is an input element,
  for example a textarea, input or select tag
  */


  Directive.prototype.isInputElement = function(el) {
    if (!(el instanceof Element)) {
      el = el[0];
    }
    return /^(input|select|textarea)$/i.test(el.tagName);
  };

  /*
  Return all directive attributes in the given element
  */


  Directive.prototype.attributes = function(element) {
    var attributes, re;
    attributes = {};
    re = new RegExp("^" + this.director.prefix + "(.*)", "i");
    $.each(element.attributes, function(i, attr) {
      var matches;
      if (matches = attr.name.match(re)) {
        return attributes[matches[1]] = attr.value;
      }
    });
    if (attributes.args != null) {
      attributes.args = this.createArguments(attributes.args);
    }
    return attributes;
  };

  /*
  Create function arguments based on a string
  */


  Directive.prototype.createArguments = function(argumentString) {
    var fn;
    fn = new Function(["return [", argumentString, "];"].join(""));
    return fn();
  };

  /*
  Finds the nearest element that matches a given selector
  */


  Directive.prototype.findNearest = function($el, selector, upwardsOnly) {
    var $context, $found;
    if (upwardsOnly == null) {
      upwardsOnly = false;
    }
    if (!upwardsOnly && ($found = $el.find(selector)).length) {
      return $found.first();
    }
    $context = $el.parent();
    while ($context.length) {
      if ($context.is(selector)) {
        return $context;
      }
      if (($found = $context.find(selector)).length) {
        return $found.first();
      }
      $context = $context.parent();
    }
    return $();
  };

  /*
  Start the directive
  */


  Directive.prototype.start = function() {
    var eventName, selector, _i, _len, _ref, _ref1;
    _ref = this.selectorEvents;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], selector = _ref1[0], eventName = _ref1[1];
      this.register(selector, eventName);
    }
    return this;
  };

  /*
  Stops the directive
  */


  Directive.prototype.stop = function() {
    var fn;
    while (fn = this.bound.pop()) {
      this.unregister(fn);
    }
    return this;
  };

  /*
  Register a directive for a selector / event name
  */


  Directive.prototype.register = function(selector, eventName) {
    var handler,
      _this = this;
    handler = function(e) {
      var attributes;
      if (e.isPropagationStopped()) {
        return false;
      }
      attributes = _this.attributes(e.target);
      return _this.handleEvent(e, attributes);
    };
    this.bound.push(handler);
    this.scope.on(eventName, selector, handler);
    return this;
  };

  /*
  Unregister a bound handler
  */


  Directive.prototype.unregister = function(fn) {
    this.bound.splice(this.bound.indexOf(fn), 1);
    return this;
  };

  /*
  Handles an event event
  */


  Directive.prototype.handleEvent = function(e) {};

  return Directive;

})();

/*
# Directive: Confirm

Triggers a confirmation box that will prevent subsequent
actions from occuring unless the user clicks `Yes`
*/


Directive.Confirm = (function(_super) {

  __extends(Confirm, _super);

  function Confirm() {
    var _this = this;
    this.handleEvent = function(e, attributes) {
      return Confirm.prototype.handleEvent.apply(_this, arguments);
    };
    return Confirm.__super__.constructor.apply(this, arguments);
  }

  /*
  Initialize the directive
  */


  Confirm.prototype.initialize = function() {
    Confirm.__super__.initialize.apply(this, arguments);
    /*
    Holds the selector events that should invoke triggers
    */

    this.selectorEvents = [["form[" + this.director.prefix + "confirm]", "submit"], ["input[" + this.director.prefix + "confirm], textarea[" + this.director.prefix + "confirm], select[" + this.director.prefix + "confirm]", "change"], ["*[" + this.director.prefix + "confirm]:not(form, input, textarea, select)", "click"]];
    return this;
  };

  /*
  Handles a trigger event
  */


  Confirm.prototype.handleEvent = function(e, attributes) {
    if (!confirm(attributes.confirm)) {
      e.preventDefault();
      e.stopPropagation();
      return false;
    } else {
      return true;
    }
  };

  return Confirm;

})(Directive);

/*
# Directive: Alert

Triggers an alert box that displays a message before continuing
*/


Directive.Alert = (function(_super) {

  __extends(Alert, _super);

  function Alert() {
    var _this = this;
    this.handleEvent = function(e, attributes) {
      return Alert.prototype.handleEvent.apply(_this, arguments);
    };
    return Alert.__super__.constructor.apply(this, arguments);
  }

  /*
  Initialize the directive
  */


  Alert.prototype.initialize = function() {
    Alert.__super__.initialize.apply(this, arguments);
    /*
    Holds the selector events that should invoke triggers
    */

    this.selectorEvents = [["form[" + this.director.prefix + "alert]", "submit"], ["input[" + this.director.prefix + "alert], textarea[" + this.director.prefix + "alert], select[" + this.director.prefix + "alert]", "change"], ["*[" + this.director.prefix + "alert]:not(form, input, textarea, select)", "click"]];
    return this;
  };

  /*
  Handles a trigger event
  */


  Alert.prototype.handleEvent = function(e, attributes) {
    return alert(attributes.alert);
  };

  return Alert;

})(Directive);

/*
# Directive: Trigger

Triggers an action when an element is clicked on or changed by the user.
*/


Directive.Trigger = (function(_super) {

  __extends(Trigger, _super);

  function Trigger() {
    var _this = this;
    this.handleEvent = function(e, attributes) {
      return Trigger.prototype.handleEvent.apply(_this, arguments);
    };
    return Trigger.__super__.constructor.apply(this, arguments);
  }

  /*
  Initialize the directive
  */


  Trigger.prototype.initialize = function() {
    Trigger.__super__.initialize.apply(this, arguments);
    /*
    Holds the selector events that should invoke triggers
    */

    this.selectorEvents = [["form[" + this.director.prefix + "trigger]", "submit"], ["input[" + this.director.prefix + "trigger], textarea[" + this.director.prefix + "trigger], select[" + this.director.prefix + "trigger]", "change"], ["*[" + this.director.prefix + "trigger]:not(form, input, textarea, select)", "click"]];
    return this;
  };

  /*
  Handles a trigger event
  */


  Trigger.prototype.handleEvent = function(e, attributes) {
    var $el, subject;
    if (e.type === "click" || e.type === "submit") {
      e.preventDefault();
    }
    $el = $(e.target);
    if (attributes.target != null) {
      subject = this.findNearest($el, attributes.target, true);
    } else {
      subject = $el;
    }
    return subject[attributes.trigger].apply(subject, attributes.args || []);
  };

  return Trigger;

})(Directive);
